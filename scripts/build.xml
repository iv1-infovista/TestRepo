<project name="HelloWorld" basedir="." default="main">
    <property name="src.dir"     value="src"/>
    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir"     value="${build.dir}/jar"/>
    <property name="main-class"  value="com.infovista.iv1.TestHello"/>
    <!-- Arguments to gwtc and devmode targets -->
    <property name="gwt.args" value="" />
    <!-- Configure path to GWT SDK -->
    <property name="gwt.sdk" location="third-parties" />
    
    <path id="gwt.class.path">
        <pathelement location="war/WEB-INF/classes"/>
        <pathelement location="${gwt.sdk}/gwt-user.jar"/>
        <pathelement location="${gwt.sdk}/gwt-dev.jar"/>
        <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
        <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
        <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
        <!-- Add any additional non-server libs (such as JUnit) here -->
    </path>
    
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="war/WEB-INF/classes" failonerror="false" />
        <delete dir="war/WEB-INF/lib" failonerror="false" />
        <delete dir="war/testhello" failonerror="false" />
    </target>
    
    <target name="gwt.libs" description="Copy libs to WEB-INF/lib">
        <mkdir dir="war/WEB-INF/lib" />
        <copy todir="war/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet.jar" />
        <copy todir="war/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet-deps.jar" />
        <!-- Add any additional server libs that need to be copied -->
    </target>
    
    <target name="gwt.compile.libs" depends="gwt.libs" description="Compile java source to bytecode">
        <mkdir dir="${classes.dir}"/>
        <javac	srcdir="src"
        		encoding="utf-8" 
				destdir="${classes.dir}"
				source="1.8" 
				target="1.8" 
				debuglevel="lines,vars,source"
				includes="com/infovista/iv1/gwt/**"
				excludes="com/infovista/iv1/gwt/client/**">
            <classpath refid="gwt.class.path"/>
        </javac>
        <jar destfile="war/WEB-INF/lib/${ant.project.name}-gwt.jar" basedir="${classes.dir}">
        	 <fileset dir="${classes.dir}"
             	includes="com/infovista/iv1/gwt/server/**,com/infovista/iv1/gwt/shared/**"
             />
        </jar>
        
    </target>
    
    <target name="gwt.compile.client" depends="gwt.compile.libs" description="GWT compile to JavaScript (production mode)">
        <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler" maxmemory="512m">
            <classpath>
                <pathelement location="src"/>
                <path refid="gwt.class.path"/>
            </classpath>
            <arg line="-war"/>
            <arg value="war"/>
            <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
            <arg line="${gwt.args}"/>
            <arg value="com.infovista.iv1.gwt.TestHello"/>
        </java>
    </target>
    
    <target name="compile">
        <mkdir dir="${classes.dir}"/>
        <javac	srcdir="${src.dir}" 
        		destdir="${classes.dir}"
				source="1.8" 
				target="1.8" 
                includes="com/infovista/iv1/**"
				excludes="com/infovista/iv1/gwt/**"/>
    </target>
    
    <target name="jar" depends="compile, gwt.compile.client">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            	<attribute name="build" value="${VERSION}"/>
            </manifest>
        </jar>
    </target>
    
    <target name="war" depends="jar" description="Create a war file">
        <zip destfile="TestHello.war" basedir="war"/>
    </target>
    
    <target name="run" depends="war">
        <echo message="starting run for build ${VERSION}"/>
        <java jar="${jar.dir}/${ant.project.name}.jar" fork="true"/>
    </target>
    
    <target name="clean-build" depends="clean,jar"/>
    
    <target name="main" depends="clean,run"/>
</project>